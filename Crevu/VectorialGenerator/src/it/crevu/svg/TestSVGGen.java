package it.crevu.svg;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.svggen.SVGGraphics2D;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Element;
import org.w3c.dom.Text;
import org.w3c.dom.svg.SVGDocument;

public class TestSVGGen {

  public void paint(Graphics2D g2d) {
    g2d.setPaint(Color.red);
    g2d.fill(new Rectangle(10, 10, 100, 100));
  }

  public static void main(String[] args) throws IOException {

    // Get a DOMImplementation.
    DOMImplementation domImpl =
        SVGDOMImplementation.getDOMImplementation();

    // Create an instance of org.w3c.dom.Document.
    String svgNS = SVGDOMImplementation.SVG_NAMESPACE_URI;
    SVGDocument myFactory = (SVGDocument)domImpl.createDocument(svgNS, "svg", null);

    // Create an instance of the SVG Generator.
    SVGGraphics2D svgGenerator = new SVGGraphics2D(myFactory);

    /*Il context spacca tutto in qualche modo :P*/
//    SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(myFactory);
//    
//    ctx.setComment("Generated by MDZ with Batik SVG Generator");
    
    //ctx.setEmbeddedFontsOn(true);//use embedded svg fonts instead of system fonts
    
//    CDATASection styleSheet = myFactory.createCDATASection("");//set di stili
//    ctx.setStyleHandler(new StyleSheetStyleHandler(styleSheet));
    
//    SVGGraphics2D svgGenerator = new SVGGraphics2D(ctx, false);
    
 // Populate the document root with the generated SVG content.
    Element root = myFactory.getDocumentElement();
    root.setAttributeNS(svgNS, "width", "1000");
    root.setAttributeNS(svgNS, "height", "700");
//    Element svgRoot = svgGenerator.getRoot(root);
    
    /*******************/
 // Do some drawing.
//    Shape circle = new Ellipse2D.Double(0, 0, 50, 50);
//    svgGenerator.setPaint(Color.red);
//    svgGenerator.fill(circle);
//    svgGenerator.translate(60, 0);
//    svgGenerator.setPaint(Color.green);
//    svgGenerator.fill(circle);
//    svgGenerator.translate(60, 0);
//    svgGenerator.setPaint(Color.blue);
//    svgGenerator.fill(circle);
//    svgGenerator.setSVGCanvasSize(new Dimension(180, 50));
    
    
    Element text = myFactory.createElementNS(svgNS, "text"); 
    text.setAttributeNS(svgNS, "font-size", "15"); 
    text.setAttributeNS(svgNS, "fill", "black"); 
    text.setAttributeNS(svgNS, "x", "250"); 
    text.setAttributeNS(svgNS, "y", "400"); 
    Text textNode = myFactory.createTextNode("hello"); 
    text.appendChild(textNode); 

    Element rect = myFactory.createElementNS(svgNS, "rect"); 
    rect.setAttributeNS(null, "x", "100"); 
    rect.setAttributeNS(null, "y", "100");                               
    rect.setAttributeNS(null, "width", "40");                               
    rect.setAttributeNS(null, "height", "50");                       
    rect.setAttributeNS(null, "style", "fill:green");                
    rect.appendChild(text); 
    root.appendChild(rect); 
//    root.appendChild(text);
    
    
    Element txtElem = myFactory.createElementNS(svgNS, "text");

//    txtElem.setAttributeNS(svgNS, "style","font-family:DroidSansRegular;font-size:" + 14 + ";");//stroke:#000000;#fill:#00ff00;");
//    txtElem.setAttributeNS(svgNS, "style","font-family: Courier New;font-size:" + 14 + ";");//yeee va
//    txtElem.setAttributeNS(svgNS, "style","font-family: Comic Sans MS;font-size:" + 14 + ";");
    
    //font: aggiungere @font-face { font-family:'Your Font Family'; src: url('resources/wds052801.ttf') format('truetype'); } nel css
    txtElem.setAttributeNS(svgNS, "x", "100"); 
    txtElem.setAttributeNS(svgNS, "y", "50"); 
    txtElem.setTextContent("some text mdz prova argh");
    root.appendChild(txtElem);
    
    
    
//    svgGenerator.getTopLevelGroup().appendChild(rect);
//    svgGenerator.getTopLevelGroup().appendChild(text);
//    svgGenerator.getTopLevelGroup().appendChild(txtElem);
    
    
    
    /********************/
        
    // Ask the test to render into the SVG Graphics2D implementation.
//    TestSVGGen test = new TestSVGGen();
//    test.paint(svgGenerator);

    // Add a stylesheet to the definition section.
//    SVGSVGElement rootSv = (SVGSVGElement) svgGenerator.getRoot();
//    Element defs = rootSv.getElementById(SVGSyntax.ID_PREFIX_GENERIC_DEFS);
//    Element style = myFactory.createElementNS
//      (SVGSyntax.SVG_NAMESPACE_URI, SVGSyntax.SVG_STYLE_TAG);
//    style.setAttributeNS(null, SVGSyntax.SVG_TYPE_ATTRIBUTE, "text/css");
//    style.appendChild(styleSheet);
//    defs.appendChild(style);

    
    // Finally, stream out SVG to the standard output using
    // UTF-8 encoding.
    boolean useCSS = true; // we want to use CSS style attributes
    Writer out = new OutputStreamWriter(System.out, "UTF-8");
//    svgGenerator.stream(out, useCSS);
    svgGenerator.stream(root, out);
    
    //output su file
    File f = new File("C:\\tmp\\mdz\\testSVG.svg");
    FileWriter fw = new FileWriter(f);
//    svgGenerator.stream(fw, useCSS);
    svgGenerator.stream(root, fw);
    fw.close();
  }
}